{"version":3,"sources":["Form.jsx","ToggleList.jsx","App.js","index.js"],"names":["Form","useState","input","setInput","addInput","setAddInput","toggleBtn","setToggleBtn","isEditItem","setIsEditItem","type","placeholder","value","onChange","e","target","onClick","map","elem","id","name","allInputData","Date","toString","alert","add","index","updatedItem","filter","deleteHandler","newEditItem","find","console","log","editHandler","ToggleList","show","setShow","text","substring","App","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"kLAoEeA,EAnEF,WACX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAoCN,mBAAS,MAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAyCA,OACE,qCACE,uBACEC,KAAK,OACLC,YAAY,eACZC,MAAOV,EACPW,SAAU,SAACC,GAAD,OAAOX,EAASW,EAAEC,OAAOH,UAErC,wBAAQI,QA/CK,WACf,GAAKd,EAEE,GAAII,IAAcA,EACvBD,EACED,EAASa,KAAI,SAACC,GACZ,OAAIA,EAAKC,KAAOX,EACP,2BAAKU,GAAZ,IAAkBE,KAAMlB,IAEnBgB,MAGXX,GAAa,GACbJ,EAAS,IACTM,EAAc,UACT,CACL,IAAMY,EAAe,CAAEF,IAAI,IAAIG,MAAOC,WAAYH,KAAMlB,GACxDG,EAAY,GAAD,mBAAKD,GAAL,CAAeiB,KAC1BlB,EAAS,SAhBTqB,MAAM,yBA6CN,SAA4BlB,EAAY,SAAW,SAElDF,EAASa,KAAI,SAACQ,GACb,OACE,gCACE,kDAAqBA,EAAIL,QACzB,wBAAQJ,QAAS,kBA/BL,SAACU,GACrB,IAAMC,EAAcvB,EAASwB,QAAO,SAACV,GACnC,OAAOQ,IAAUR,EAAKC,MAExBd,EAAYsB,GA2BmBE,CAAcJ,EAAIN,KAAzC,oBACA,wBAAQH,QAAS,kBAzBP,SAACG,GACnB,IAAIW,EAAc1B,EAAS2B,MAAK,SAACb,GAC/B,OAAOA,EAAKC,KAAOA,KAErBa,QAAQC,IAAIH,GACZvB,GAAa,GACbJ,EAAS2B,EAAYV,MACrBX,EAAcU,GAkBiBe,CAAYT,EAAIN,KAAvC,oBAHQM,EAAIN,WC3CTgB,G,MAbI,WACjB,MAAwBlC,oBAAS,GAAjC,mBAAOmC,EAAP,KAAaC,EAAb,KACMC,EACJ,+GACF,OACE,qCACGF,EAAOE,EAAH,UAAaA,EAAKC,UAAU,EAAG,IAA/B,OACL,wBAAQvB,QAAS,kBAAMqB,GAASD,IAAhC,SACGA,EAAO,WAAa,mBCJd,SAASI,IACtB,OACE,sBAAKC,UAAU,MAAf,UACE,sDACA,cAAC,EAAD,IACA,cAAC,EAAD,OCNN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACN,EAAD,MAEFE,K","file":"static/js/main.a28bc45d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nconst Form = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [addInput, setAddInput] = useState([]);\r\n  const [toggleBtn, setToggleBtn] = useState(true);\r\n  const [isEditItem, setIsEditItem] = useState(null);\r\n\r\n  const addItems = () => {\r\n    if (!input) {\r\n      alert(\"please fill the data\");\r\n    } else if (toggleBtn && !toggleBtn) {\r\n      setAddInput(\r\n        addInput.map((elem) => {\r\n          if (elem.id === isEditItem) {\r\n            return { ...elem, name: input };\r\n          }\r\n          return elem;\r\n        })\r\n      );\r\n      setToggleBtn(true);\r\n      setInput(\"\");\r\n      setIsEditItem(null);\r\n    } else {\r\n      const allInputData = { id: new Date().toString(), name: input };\r\n      setAddInput([...addInput, allInputData]);\r\n      setInput(\"\");\r\n    }\r\n  };\r\n\r\n  const deleteHandler = (index) => {\r\n    const updatedItem = addInput.filter((elem) => {\r\n      return index !== elem.id;\r\n    });\r\n    setAddInput(updatedItem);\r\n  };\r\n\r\n  const editHandler = (id) => {\r\n    let newEditItem = addInput.find((elem) => {\r\n      return elem.id === id;\r\n    });\r\n    console.log(newEditItem);\r\n    setToggleBtn(false);\r\n    setInput(newEditItem.name);\r\n    setIsEditItem(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"items to add\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n      />\r\n      <button onClick={addItems}>{toggleBtn ? \"submit\" : \"edit\"}</button>\r\n\r\n      {addInput.map((add) => {\r\n        return (\r\n          <div key={add.id}>\r\n            <h5>You have added -{add.name}</h5>\r\n            <button onClick={() => deleteHandler(add.id)}>Delete</button>\r\n            <button onClick={() => editHandler(add.id)}>Edit</button>\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\nexport default Form;\r\n","//toggle read more or less\r\nimport React, { useState } from \"react\";\r\nconst ToggleList = () => {\r\n  const [show, setShow] = useState(true);\r\n  const text =\r\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\";\r\n  return (\r\n    <>\r\n      {show ? text : `${text.substring(0, 10)}...`}\r\n      <button onClick={() => setShow(!show)}>\r\n        {show ? \"readmore\" : \"read less\"}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\nexport default ToggleList;\r\n","import React from \"react\";\nimport Form from \"./Form\";\nimport \"./styles.css\";\n\nimport ToggleList from \"./ToggleList\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header>Todo Application</header>\n      <Form />\n      <ToggleList />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}